name: Compile on Windows

on: [push, pull_request]

jobs:

  Compile-on-Windows:

    runs-on: windows-latest

    env:
      DEBIAN_FRONTEND: "noninteractive"
      QT_QPA_PLATFORM: "offscreen"
      XDG_RUNTIME_DIR: "/tmp"
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TRIPLET: x64-windows

    steps:

      - uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - uses: actions/checkout@v3
        with:
          submodules: true

      # Setup the build machine with the most recent versions of CMake and Ninja. Both are cached if not already: on subsequent runs both will be quickly restored from GitHub cache service.
      - uses: lukka/get-cmake@latest
      
      # On Windows runners, let's ensure to have the Developer Command Prompt environment setup correctly.
      # As used here the Developer Command Prompt created is targeting x64 and using the default the Windows SDK.
      - uses: ilammy/msvc-dev-cmd@v1

      - name: Setup vcpkg 
        uses: lukka/run-vcpkg@v11
        with:
          vcpkgGitCommitId: 6a349fe1fbea1e5fcda2e0775f555d829a5e82df
      
      - name: Set and Retrieve Github ENV variables
        shell: bash
        run: |
          echo "VCPKG_ROOT=${GITHUB_WORKSPACE}/vcpkg" >> $GITHUB_ENV

      # Restore vcpkg from the GitHub Action cache service. Note that packages are restored by vcpkg's binary caching
      # when it is being run afterwards by CMake.
      - name: Restore vcpkg
        uses: actions/cache@v3
        with:
          path: |
            ${VCPKG_ROOT}
            !${VCPKG_ROOT}/buildtrees
            !${VCPKG_ROOT}/packages
            !${VCPKG_ROOT}/downloads
            !${VCPKG_ROOT}/installed
          # The key is composed in a way that it gets properly invalidated whenever a different version of vcpkg is being used.
          key: |
            ${{ hashFiles( 'CMakeLists.txt' )}}      

      - name: Restore from cache the dependencies and generate project files
        run: |
          cmake --preset windows-visual-studio-vcpkg-without-tests

      - name: Build
        run: |
          cmake --build --preset windows-release
      
      - name: Configure
        run: |
          cmake --preset windows-visual-studio-vcpkg-with-tests
  
      - name: Build
        run: |
          cmake --build --preset windows-debug
      
      - name: Set PROJ env
        shell: bash
        run: |
          echo PROJ_DATA="${{github.workspace}}/builds/windows-visual-studio-vcpkg-with-tests/vcpkg_installed/x64-windows/share/proj" >> $GITHUB_ENV 
      
      - name: Set PROJ env
        shell: powershell
        run: |
           echo $Env:PROJ_DATA
           cd $Env:PROJ_DATA
           dir
           
      - name: Test
        run: |
          ctest -C Debug --preset windows-tests
      
      - name: Try Install
        run: |
          cmake --preset windows-visual-studio-vcpkg-without-tests
          cmake --build --preset windows-release
          cd "${{github.workspace}}/install"
          dir

      - name: Upload file as artifact
        uses: actions/upload-artifact@v3
        with:
          name: simplerasters
          path: builds\windows-visual-studio-vcpkg-without-tests\src\Release\simplerasters.dll
