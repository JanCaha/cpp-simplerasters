name: Create DEB artifact and Release

on:
  workflow_run:
    workflows: ["Tests for Library"]
    types:
      - completed
    branches:
      - 'main'
      - 'master'

jobs:

  Create-deb-file-library:

    runs-on: ubuntu-latest

    permissions:
      contents: write

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:

      - name: Update and Upgrade
        run: |
          sudo apt update
          sudo apt install ninja-build

      - name: Install GDAL
        run: |
          sudo apt-get -y install gdal-bin libgdal-dev

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure
        run: | 
           mkdir build
            cmake \
            -S. \
            -Bbuild \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_TESTS:bool=off \
            -DPACK_DEB:bool=on

      - name: Build
        run: | 
          cmake --build build --config Release --target all

      - name: Pack deb file
        run: |
          cmake --build build --config Release --target pack_deb
      
      - name: Move deb file
        run: |
          mv _packages/simplerasters_*.deb .
          
      - name: Upload DEB file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: simplerasters
          path: simplerasters_*.deb
      
      - name: Version and latest tag
        id: version
        run: |
          echo "VERSION=$(grep "project(" CMakeLists.txt | grep -E -o -e "[0-9\.]+")" >> $GITHUB_OUTPUT
          echo "LATEST_TAG=$(git describe --tags --abbrev=0)" >> $GITHUB_OUTPUT
          echo "CURRENT_TAG=v$(grep "project(" CMakeLists.txt | grep -E -o -e "[0-9\.]+")" >> $GITHUB_OUTPUT

      - name: Push tag
        uses: anothrNick/github-tag-action@1.64.0 
        if: steps.version.outputs.CURRENT_TAG != steps.version.outputs.LATEST_TAG
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # if you don't want to set write permissions use a PAT token
          CUSTOM_TAG : "v${{steps.version.outputs.VERSION}}"

      - name: Release
        uses: softprops/action-gh-release@v1
        if: steps.version.outputs.CURRENT_TAG != steps.version.outputs.LATEST_TAG
        with:
          files: simplerasters_*.deb
          tag_name: "v${{steps.version.outputs.VERSION}}"
  
  Release-to-PPA:

    runs-on: ubuntu-latest

    needs: Create-deb-file-library

    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      PACKAGE: simplerasters
    
    steps:
      
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set env
        run: echo "VERSION=$(grep "project("  CMakeLists.txt | grep -E -o -e "[0-9\.]+" | head -n 1)" >> $GITHUB_ENV
      
      - name: Print Version
        run: |
          echo "-----"
          echo "Project Version"
          echo ${PACKAGE}
          echo ${VERSION}
          echo "-----"

      - name: install build tools
        run: |
          sudo apt-get update
          sudo apt-get install debhelper devscripts dput
      
      - name: import gpg key 55C76CE00DD5C647
        run: |
          echo "${GPG_PRIVATE_KEY}" | base64 --decode | gpg --batch --quiet --import
          echo "${GPG_PASSPHRASE}" | gpg --batch --quiet --passphrase-fd 0 --pinentry-mode loopback -u 55C76CE00DD5C647 --dry-run --sign README.md
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEYÂ }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
      
      - name: Create tar.gz package
        run: |
          cd ..
          dir
          tar -acf "${PACKAGE}"_"${VERSION}".orig.tar.gz cpp-simplerasters
          ls -l

      - name: Debuild
        run: debuild -S -sa -d
        env:
          DEBSIGN_PROGRAM: gpg --batch --pinentry-mode loopback
          DEBSIGN_KEYID: 55C76CE00DD5C647
      
      - name: Show Files
        run: |
          cd ..
          ls -l

      - name: Dput to Repo
        run: |
          cd ..
          FILE=$(find . -name "*_source.changes")
          echo $FILE
          dput ppa:jancaha/gis-tools $FILE
    